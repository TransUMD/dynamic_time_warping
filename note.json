{"paragraphs":[{"text":"%md\n\n<h3>Dynamic Time Warping</h3>\n<p>\nIn time series analysis, dynamic time warping (DTW) is an algorithm for measuring similarity between two temporal sequences which may vary in speed. DTW is a method that calculates an optimal match between two given sequences (e.g. time series) with certain restrictions. The sequences are \"warped\" non-linearly in the time dimension to determine a measure of their similarity independent of certain non-linear variations in the time dimension.\n<br>\n<br>\nIn this script, I use the python package (fastdtw) and apply it to a Energy Usage time series dataset found here: <a href=\"https://archive.ics.uci.edu/ml/datasets/Individual+household+electric+power+consumption\" target=\"_blank\">UCI Machine Learning - Individual household electric power consumption Data Set </a>\n<br>\n</p>","dateUpdated":"Aug 7, 2016 12:48:12 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470573263420_-624530671","id":"20160807-123423_353636012","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Dynamic Time Warping</h3>\n<p>\nIn time series analysis, dynamic time warping (DTW) is an algorithm for measuring similarity between two temporal sequences which may vary in speed. DTW is a method that calculates an optimal match between two given sequences (e.g. time series) with certain restrictions. The sequences are \"warped\" non-linearly in the time dimension to determine a measure of their similarity independent of certain non-linear variations in the time dimension.\n<br>\n<br>\nIn this script, I use the python package (fastdtw) and apply it to a Energy Usage time series dataset found here: <a href=\"https://archive.ics.uci.edu/ml/datasets/Individual+household+electric+power+consumption\" target=\"_blank\">UCI Machine Learning - Individual household electric power consumption Data Set </a>\n<br>\n</p>\n"},"dateCreated":"Aug 7, 2016 12:34:23 PM","dateStarted":"Aug 7, 2016 12:44:56 PM","dateFinished":"Aug 7, 2016 12:44:56 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:43"},{"title":"Import Dataset","text":"%pyspark\n\ndata   = sc.textFile(\"hdfs://sandbox.hortonworks.com:/tmp/household_power_consumption_uci_edu.txt\")\nheader = data.first().split(';')\ndata   = data.map(lambda x: x.split(';')).filter(lambda x: x!=header)\n","dateUpdated":"Aug 7, 2016 8:44:08 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470438623224_-1627151334","id":"20160805-231023_674347810","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Aug 5, 2016 11:10:23 PM","dateStarted":"Aug 7, 2016 8:44:08 PM","dateFinished":"Aug 7, 2016 8:44:08 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44"},{"title":"Basic Preprocessing / Variable Transformations","text":"%pyspark\n\ndf = data.toDF(header)\n\n# Use schema\ndf1 = df.withColumn('Sub_metering_1',df.Sub_metering_1.cast('float')) \\\n    .withColumn('Sub_metering_2',df.Sub_metering_2.cast('float')) \\\n    .withColumn('Sub_metering_3',df.Sub_metering_3.cast('float')) \\\n    .withColumn('Voltage',df.Voltage.cast('float'))\n\ndf1.show(5)","dateUpdated":"Aug 7, 2016 12:44:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470438758730_175598121","id":"20160805-231238_1021488905","result":{"code":"SUCCESS","type":"TEXT","msg":"+----------+--------+-------------------+---------------------+-------+----------------+--------------+--------------+--------------+\n|      Date|    Time|Global_active_power|Global_reactive_power|Voltage|Global_intensity|Sub_metering_1|Sub_metering_2|Sub_metering_3|\n+----------+--------+-------------------+---------------------+-------+----------------+--------------+--------------+--------------+\n|16/12/2006|17:24:00|              4.216|                0.418| 234.84|          18.400|           0.0|           1.0|          17.0|\n|16/12/2006|17:25:00|              5.360|                0.436| 233.63|          23.000|           0.0|           1.0|          16.0|\n|16/12/2006|17:26:00|              5.374|                0.498| 233.29|          23.000|           0.0|           2.0|          17.0|\n|16/12/2006|17:27:00|              5.388|                0.502| 233.74|          23.000|           0.0|           1.0|          17.0|\n|16/12/2006|17:28:00|              3.666|                0.528| 235.68|          15.800|           0.0|           1.0|          17.0|\n+----------+--------+-------------------+---------------------+-------+----------------+--------------+--------------+--------------+\nonly showing top 5 rows\n\n"},"dateCreated":"Aug 5, 2016 11:12:38 PM","dateStarted":"Aug 7, 2016 12:44:56 PM","dateFinished":"Aug 7, 2016 12:44:56 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:45"},{"title":"Groupy by Date and collect/collapse meter readings to a daily array of values","text":"%pyspark\n\nfrom pyspark.sql import functions as F\n\ndf2 = df1.groupby(\"Date\").agg(F.collect_list(\"Sub_metering_1\").alias('meter1'),F.collect_list(\"Sub_metering_2\").alias('meter2'),F.collect_list(\"Sub_metering_3\").alias('meter3'))\n\ndf2.show(5)","dateUpdated":"Aug 7, 2016 12:44:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470439072778_-2134558513","id":"20160805-231752_398081316","result":{"code":"SUCCESS","type":"TEXT","msg":"+---------+--------------------+--------------------+--------------------+\n|     Date|              meter1|              meter2|              meter3|\n+---------+--------------------+--------------------+--------------------+\n|15/9/2009|[0.0, 0.0, 0.0, 0...|[0.0, 0.0, 0.0, 0...|[18.0, 19.0, 19.0...|\n| 3/2/2010|[0.0, 0.0, 0.0, 0...|[0.0, 0.0, 0.0, 0...|[19.0, 19.0, 18.0...|\n| 5/1/2008|[0.0, 0.0, 0.0, 0...|[0.0, 0.0, 0.0, 0...|[0.0, 0.0, 0.0, 0...|\n| 9/4/2007|[0.0, 0.0, 0.0, 0...|[1.0, 2.0, 1.0, 1...|[0.0, 0.0, 0.0, 0...|\n|18/3/2007|[0.0, 0.0, 0.0, 0...|[1.0, 2.0, 1.0, 1...|[0.0, 0.0, 0.0, 0...|\n+---------+--------------------+--------------------+--------------------+\nonly showing top 5 rows\n\n"},"dateCreated":"Aug 5, 2016 11:17:52 PM","dateStarted":"Aug 7, 2016 12:44:56 PM","dateFinished":"Aug 7, 2016 12:45:10 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46"},{"title":"Calculate Dynamic Time Warping (Euclidean) Distance","text":"%pyspark\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import *\n\ndef get_udf_distance(array1, array2):\n    distance, path = fastdtw(array1, array2, dist=euclidean)\n    return distance\n\nudf_dtw = udf(get_udf_distance , FloatType())\ndf3 = df2.select('Date', udf_dtw(df2.meter1, df2.meter2).alias('dtw_distance (meter1-meter2)'))\n\ndf3.show()\n","dateUpdated":"Aug 7, 2016 12:44:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470499012171_-1561573060","id":"20160806-155652_110639884","result":{"code":"SUCCESS","type":"TEXT","msg":"+----------+----------------------------+\n|      Date|dtw_distance (meter1-meter2)|\n+----------+----------------------------+\n| 15/9/2009|                      2115.0|\n|  3/2/2010|                      2748.0|\n|  5/1/2008|                      2108.0|\n|  9/4/2007|                      2837.0|\n| 18/3/2007|                      4985.0|\n| 27/5/2007|                      3871.0|\n|  5/1/2009|                      1354.0|\n|  7/5/2010|                      1222.0|\n|  9/4/2008|                       376.0|\n| 16/4/2010|                      2549.0|\n| 18/3/2008|                      1296.0|\n| 27/5/2008|                      5352.0|\n|  9/4/2009|                      2831.0|\n|14/10/2010|                      2023.0|\n| 18/3/2009|                      1323.0|\n| 21/1/2010|                      1212.0|\n| 27/5/2009|                      1711.0|\n| 29/9/2010|                      1633.0|\n| 30/3/2010|                      1727.0|\n|  5/5/2007|                      2282.0|\n+----------+----------------------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Aug 6, 2016 3:56:52 PM","dateStarted":"Aug 7, 2016 12:44:57 PM","dateFinished":"Aug 7, 2016 12:45:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:47"},{"text":"%md\n<strong>To Do:</strong> \n3-Node Cluster\n<br>\n<h5>dz - 201608</h5>","dateUpdated":"Aug 7, 2016 10:25:07 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470572694197_1691460138","id":"20160807-122454_421516595","result":{"code":"SUCCESS","type":"HTML","msg":"<p><strong>To Do:</strong>\n<br  />3-Node Cluster\n<br  /><br></p>\n<h5>dz - 201608</h5>\n"},"dateCreated":"Aug 7, 2016 12:24:54 PM","dateStarted":"Aug 7, 2016 10:24:59 PM","dateFinished":"Aug 7, 2016 10:24:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:48","focus":true},{"dateUpdated":"Aug 7, 2016 12:44:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1470573600410_1933430264","id":"20160807-124000_2136936806","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Aug 7, 2016 12:40:00 PM","dateStarted":"Aug 7, 2016 12:45:10 PM","dateFinished":"Aug 7, 2016 12:45:10 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:49"}],"name":"z_Dynamic_Time_Warping","id":"2BT2NTY1X","angularObjects":{"2BQ9Y66FH":[],"2BRP5663K":[],"2BTGEXB4E":[],"2BSQWXCH6":[],"2BTMKA19Z":[],"2BTR1A48W":[],"2BQJ6U96F":[],"2BSPSGWCB":[],"2BS87HHBV":[],"2BSQWMA8N":[],"2BRF6H8MG":[],"2BS2FND5T":[],"2BT4F2H1E":[]},"config":{"looknfeel":"default"},"info":{}}